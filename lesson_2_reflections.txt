Q1: What happens when you initialize a repository? Why do you need to do it?

Git init will make a repository  out of the current directory and sub-folders.  No commits have yet been made, therefore, git status shows a fatal error, "your current branch 'master' does not have any commits yet".  Initialize Git then make your first commit to solve error.

Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows the user to add, remove, and get status for your current working directory before making the initial commit and following commits.

Q3: How can you use the staging area to make sure you have one commit per logical change?

The user can compare the working directory with the staging directory, to view the current changes between files added in the staging area and the working directory.  The user can also compare the staging area with the current commit.

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

The user can create different versions of a file, detached from the master branch directory.  i.e. adding an experimental change, creating a free and paid version of game. The user could use branches to create new features in the game or to resolve issues involved with bugs or internal operations.

Q5: How do the diagrams help you visualize the branch structure?

The structure of branches and commits are not linear and are isolated at times.  Because each commit is dependent on its parent commit, detaching the head from an older commit will not be associated with a branch, until the new commit has been turned into it's own branch.  It looks like that new branch can then be merged back with Master or a different branch in order to commit the new changes to the master branch.  Diagrams isolate branches and each commit as well as diagraming the merge back to a branch.

Q5: What is the result of merging two branches together? Why do we represent it in the diagram the way we do? 

Mergine two branches together puts together all commits from two branches... i.e. commit branch 1 and 2 (with their associated commits relative to each other, and the new branch, branch 3.  All branches are respective of their parents.  We represent it in the diagram in order to see which branches are associated with each other and which commits are associated with each other to merge into the current working branch.



