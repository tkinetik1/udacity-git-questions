Q1: When would you want to create a remote repository rather than keeping all your work local?

The user should create a remote repository when they are A) working on the project from two or more different locations, B) Adding a file manually to remote through github, C) collaborating with a team on a team project and looking to merge another developer's branch.

Q2: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

This might make unnecesarry changes to your current remote, which can be contributed to by multiple users with different changes in the same file or impolementation of something that is counter-productive to the current branch.  This could be confusing if a whole new feature set was pulled in our a major change was made through an automatic pull.

Q3: Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a copy of another's repository on github to your own github repository.  It leaves a traceback to the original repository that was cloned.  A clone is a local copy of a remote repository. A branch is a set of commits on either local or remote or both.  Use a fork when we want to work on a public branch project on our own, as a remote.  Use a clone to get a local copy of the repository which points at the origin remote repository.  Use a branch to make specific changes locally and to push to remote or to view other parallel work in collaboration on project.

Q4: What is the benefit of having a copy of the last known state of the remote stored locally?

It allows the developer to go back to the current working state and our get a diff from the current working remote.  It also prohibits new code from being updated, that may create conflicts or bugs based on others changing the remote.  A user can also merge there current commit and branch when finished with their merge commit to last know state of remote stored locally.

Q5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaboration without Git or Github would be similar to Git, plus a bunch of complexities that aren't automated through the service.  A master branch would have to be verified by each contributer before making a commit to master from other versions.  If not all versions are working, bugs/types/features will break if not implemented perfectly.  Many phone calls and conference would be needed to find out bug/type issues, not having tracked each contributors branch and not having a "diff"/compare feature. 3+ contributors collaboration would become more and more complex.  Having a tracked log from each contributor with each change specifically being compared to experimental and master/production branch would be more efficient and easier.

Q6: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Creating a seperate branch from master is for things like bug fixes, experimental features, collaborative sub groups, making diff calls to avoid merge conflicts, and to allow for pull requests to be presented and approved.
